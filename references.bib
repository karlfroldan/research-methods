@misc{Breitner2018,
      title={Ready, Set, Verify! Applying hs-to-coq to real-world Haskell code}, 
      author={Joachim Breitner and Antal Spector-Zabusky and Yao Li and Christine Rizkallah and John Wiegley and Stephanie Weirich},
      year={2018},
      eprint={1803.06960},
      archivePrefix={arXiv},
      primaryClass={cs.PL}
}

@article{SpectorZabusky2018,
   title={Total Haskell is reasonable Coq},
   ISBN={9781450355865},
   url={http://dx.doi.org/10.1145/3167092},
   DOI={10.1145/3167092},
   journal={Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs},
   publisher={ACM},
   author={Spector-Zabusky, Antal and Breitner, Joachim and Rizkallah, Christine and Weirich, Stephanie},
   year={2018},
   month={Jan}
}

@article{ElBakouny2017,
   title={A Coq-based synthesis of Scala programs which are correct-by-construction},
   ISBN={9781450350983},
   url={http://dx.doi.org/10.1145/3103111.3104041},
   DOI={10.1145/3103111.3104041},
   journal={Proceedings of the 19th Workshop on Formal Techniques for Java-like Programs},
   publisher={ACM},
   author={El Bakouny, Youssef and Crolard, Tristan and Mezher, Dani},
   year={2017},
   month={Jun}
}

@inproceedings{AbelBenkeBove2005,
author = {Abel, Andreas and Benke, Marcin and Bove, Ana and Hughes, John and Norell, Ulf},
year = {2005},
month = {01},
pages = {62-73},
title = {Verifying Haskell programs using constructive type theory},
journal = {Haskell'05 - Proceedings of the ACM SIGPLAN 2005 Haskell Workshop},
doi = {10.1145/1088348.1088355}
}

@article{ZaghloulAlJami2017,
  author          = {Zaghloul et al.},
  title           = {Parallelizing A* Path Finding Algorithm},
  journal         = {International Journal Of Engineering And Computer Science},
  volume          = {6},
  number          = {9},
  year            = {2017},
  pages           = {22469-22476},
}

@misc{WeinstockHolladay,
  author       = {Ariana Weinstock and Rachel Holladay},
  title        = {Parallel A* Graph Search}
}

@book{Marlow2013,
  author         = {Simon Marlow},
  editor         = {Andy Oram and Maria Gulick},
  title          = {Parallel and Concurrent Programming in Haskell},
  publisher      = {O'Reilly Media, Inc.},
  year           = {2013}
}

@misc{Saligrama2019,
      title={A Practical Analysis of Rust's Concurrency Story}, 
      author={Aditya Saligrama and Andrew Shen and Jon Gjengset},
      year={2019},
      eprint={1904.12210},
      archivePrefix={arXiv},
      primaryClass={cs.DC}
}

@article{Jung2018,
author = {Jung, Ralf and Jourdan, Jacques-Henri and Krebbers, Robbert and Dreyer, Derek},
title = {RustBelt: Securing the Foundations of the Rust Programming Language},
year = {2017},
issue_date = {January 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2},
number = {POPL},
url = {https://doi.org/10.1145/3158154},
doi = {10.1145/3158154},
abstract = {Rust is a new systems programming language that promises to overcome the seemingly fundamental tradeoff between high-level safety guarantees and low-level control over resource management. Unfortunately, none of Rust's safety claims have been formally proven, and there is good reason to question whether they actually hold. Specifically, Rust employs a strong, ownership-based type system, but then extends the expressive power of this core type system through libraries that internally use unsafe features. In this paper, we give the first formal (and machine-checked) safety proof for a language representing a realistic subset of Rust. Our proof is extensible in the sense that, for each new Rust library that uses unsafe features, we can say what verification condition it must satisfy in order for it to be deemed a safe extension to the language. We have carried out this verification for some of the most important libraries that are used throughout the Rust ecosystem.},
journal = {Proc. ACM Program. Lang.},
month = dec,
articleno = {66},
numpages = {34},
keywords = {logical relations, Rust, separation logic, concurrency, type systems}
}

