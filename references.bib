@misc{Breitner2018,
      title={Ready, Set, Verify! Applying hs-to-coq to real-world Haskell code}, 
      author={Joachim Breitner and Antal Spector-Zabusky and Yao Li and Christine Rizkallah and John Wiegley and Stephanie Weirich},
      year={2018},
      eprint={1803.06960},
      archivePrefix={arXiv},
      primaryClass={cs.PL}
}

@article{SpectorZabusky2018,
   title={Total Haskell is reasonable Coq},
   ISBN={9781450355865},
   url={http://dx.doi.org/10.1145/3167092},
   DOI={10.1145/3167092},
   journal={Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs},
   publisher={ACM},
   author={Spector-Zabusky, Antal and Breitner, Joachim and Rizkallah, Christine and Weirich, Stephanie},
   year={2018},
   month={Jan}
}

@article{ElBakouny2017,
   title={A Coq-based synthesis of Scala programs which are correct-by-construction},
   ISBN={9781450350983},
   url={http://dx.doi.org/10.1145/3103111.3104041},
   DOI={10.1145/3103111.3104041},
   journal={Proceedings of the 19th Workshop on Formal Techniques for Java-like Programs},
   publisher={ACM},
   author={El Bakouny, Youssef and Crolard, Tristan and Mezher, Dani},
   year={2017},
   month={Jun}
}

@inproceedings{AbelBenkeBove2005,
author = {Abel, Andreas and Benke, Marcin and Bove, Ana and Hughes, John and Norell, Ulf},
year = {2005},
month = {01},
pages = {62-73},
title = {Verifying Haskell programs using constructive type theory},
journal = {Haskell'05 - Proceedings of the ACM SIGPLAN 2005 Haskell Workshop},
doi = {10.1145/1088348.1088355}
}

@article{ZaghloulAlJami2017,
  author          = {Zaghloul et al.},
  title           = {Parallelizing A* Path Finding Algorithm},
  journal         = {International Journal Of Engineering And Computer Science},
  volume          = {6},
  number          = {9},
  year            = {2017},
  pages           = {22469-22476},
}

@misc{WeinstockHolladay,
  author       = {Ariana Weinstock and Rachel Holladay},
  title        = {Parallel A* Graph Search}
}

@book{Marlow2013,
  author         = {Simon Marlow},
  editor         = {Andy Oram and Maria Gulick},
  title          = {Parallel and Concurrent Programming in Haskell},
  publisher      = {O'Reilly Media, Inc.},
  year           = {2013}
}

@misc{Saligrama2019,
      title={A Practical Analysis of Rust's Concurrency Story}, 
      author={Aditya Saligrama and Andrew Shen and Jon Gjengset},
      year={2019},
      eprint={1904.12210},
      archivePrefix={arXiv},
      primaryClass={cs.DC}
}

@article{Jung2018,
    author = {Jung, Ralf and Jourdan, Jacques-Henri and Krebbers, Robbert and Dreyer, Derek},
    title = {RustBelt: Securing the Foundations of the Rust Programming Language},
    year = {2017},
    issue_date = {January 2018},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {2},
    number = {POPL},
    url = {https://doi.org/10.1145/3158154},
    doi = {10.1145/3158154},
    abstract = {Rust is a new systems programming language that promises to overcome the seemingly fundamental tradeoff between high-level safety guarantees and low-level control over resource management. Unfortunately, none of Rust's safety claims have been formally proven, and there is good reason to question whether they actually hold. Specifically, Rust employs a strong, ownership-based type system, but then extends the expressive power of this core type system through libraries that internally use unsafe features. In this paper, we give the first formal (and machine-checked) safety proof for a language representing a realistic subset of Rust. Our proof is extensible in the sense that, for each new Rust library that uses unsafe features, we can say what verification condition it must satisfy in order for it to be deemed a safe extension to the language. We have carried out this verification for some of the most important libraries that are used throughout the Rust ecosystem.},
    journal = {Proc. ACM Program. Lang.},
    month = dec,
    articleno = {66},
    numpages = {34},
    keywords = {logical relations, Rust, separation logic, concurrency, type systems}
}

@book{CLRS,
author = {Cormen, Thomas H. and Leiserson, Charles E. and Rivest, Ronald L. and Stein, Clifford},
title = {Introduction to Algorithms, Third Edition},
year = {2009},
isbn = {0262033844},
publisher = {The MIT Press},
edition = {3rd},
abstract = {If you had to buy just one text on algorithms, Introduction to Algorithms is a magnificent choice. The book begins by considering the mathematical foundations of the analysis of algorithms and maintains this mathematical rigor throughout the work. The tools developed in these opening sections are then applied to sorting, data structures, graphs, and a variety of selected algorithms including computational geometry, string algorithms, parallel models of computation, fast Fourier transforms (FFTs), and more. This book's strength lies in its encyclopedic range, clear exposition, and powerful analysis. Pseudo-code explanation of the algorithms coupled with proof of their accuracy makes this book is a great resource on the basic tools used to analyze the performance of algorithms.}
}

@book{Skiena,
  abstract = {This expanded and updated second edition of a classic bestseller continues to take the mystery out of designing and analyzing algorithms and their efficacy and efficiency. Expanding on the highly successful formula of the first edition, the book now serves as the primary textbook of choice for any algorithm design course while maintaining its status as the premier practical reference guide to algorithms. NEW: (1) Incorporates twice the tutorial material and exercises. (2) Provides full online support for lecturers, and a completely updated and improved website component with lecture slides, audio and video. (3) Contains a highly unique catalog of the 75 most important algorithmic problems. (4) Includes new war stories and interview problems, relating experiences from real-world applications. Unique, handy reference package with a practical, hands-on appeal to a wide audience This classic bestseller has been expanded and updated with twice the original tutorial material and exercises Contains a highly unique catalog of the 75 most important algorithmic problems Additional useful information such as lecture slides and updates available via author's website.},
  added-at = {2015-05-11T09:08:43.000+0200},
  address = {London},
  author = {Skiena, Steven S.},
  biburl = {https://www.bibsonomy.org/bibtex/29b2f5050241fea63ff5f49cc29b5bebf/ytyoun},
  doi = {10.1007/978-1-84800-070-4},
  interhash = {1087fa2b9db733b071ece02fc207a88d},
  intrahash = {9b2f5050241fea63ff5f49cc29b5bebf},
  isbn = {9781848000704 1848000707 9781848000698 1848000693},
  keywords = {algorithm programming textbook},
  publisher = {Springer},
  refid = {370729337},
  timestamp = {2015-12-12T14:24:40.000+0100},
  title = {The Algorithm Design Manual},
  year = 2008
}

@book{Knuth1997,
author = {Knuth, Donald E.},
title = {The Art of Computer Programming, Volume 1 (3rd Ed.): Fundamental Algorithms},
year = {1997},
isbn = {0201896834},
publisher = {Addison Wesley Longman Publishing Co., Inc.},
address = {USA}
}

@article{HartNilssonRaphael1968,
  author          = {Hart, Peter E. and Nillson, Nils J. and Betram, Raphael},
  title           = {A Formal Basis for the Heuristic Determination of Minimum Cost Paths},
  journal         = {IEEE Transactions of Systems Science and Cybernetics},
  volume          = {SSC-4},
  number          = {2},
  year            = {1968}
}